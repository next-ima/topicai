import os
from dotenv import load_dotenv
import openai
from pymongo import MongoClient
from datetime import datetime


load_dotenv()# Load environment variables from .env file

# Set your API key (directly or via environment variable)
AI_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
DB_client = MongoClient("mongodb://localhost:27017/")

db = DB_client["News"]
topics = db["Topics"]
topic_updates = db["Topic updates"]


# Send prompt to ChatGPT (gpt-4 or gpt-3.5-turbo)





output = response.choices[0].message.content
keywords = response.choices[0].message.content.splitlines()[0].split()

topic = topics.insert_one({"keywords": keywords})
keyword_id = topic.inserted_id
topic_updates.insert_one({"topic_id": keyword_id, "summary": output, "score": "working progress", "update_time": timestamp})

def new_topic():   
    # Creating a new topic with initial keywords (vvvv EXAMPLE vvvv)
    user_topic = ["nuclear weapons", "war", "Russia", "Ukraine"]
    topic = Topics(user_topic)

    topic_update(topic, False)

def topic_update(topic, update = True):
    if update:
        pass  # TODO: implement update logic
    else:
        summary = gpt_helper(topic, False)

def gpt_helper(object, update = True):
    # If update is True, we assume we are updating an existing topic
    response = AI_client.chat.completions.create(
        model="gpt-4o",  # or "gpt-3.5-turbo"
        messages=[
            # TODO: create the prompt and update the topic
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"Update the topic with the following prompt: "}
        ] if update else [
            {"role": "system", "content": "You are a journalist and you write with a news like style. Don't forget some interesting facts or headlines about the topic"
            " the user will give you. Also format it so that the first line are the topic keywords (separate the words with a space, if the topic keyword has multiple"
            " words add in between '_'), next is blank and then there is the text. MAX 100 words"},
            {"role": "user", "content": f"Can you tell me some news about the {object.keywords}"}
        ]
    )
    return response

def mongo_helper(object, topic=False):
    # If topic is True, we assume we are adding a     topic
    if topic:
        topic = topics.insert_one({"keywords": object.keywords})
        topic_id = topic.inserted_id
    else:
        pass
    

class Topics:
    def __init__(self, keywords):
        # unique ID is generated by MongoDB

        self.keywords = keywords

class Topicupdates:
    def __init__(self, topic_id, summary, score):
        # unique ID is generated by MongoDB
        # if self.score is not set because it is the first_gen, it will be set to 0

        self.topic_id = int
        self.summary = str
        self.score = float
        self.updatetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")